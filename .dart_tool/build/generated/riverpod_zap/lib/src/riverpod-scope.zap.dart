// Generated by zap_dev, do not edit!
import 'package:zap/zap.dart' as _i0;
import 'dart:core' as _i1;
import 'package:riverpod/src/framework.dart' as _i2;
import 'dart:html' as _i3;
import 'package:riverpod_zap/src/context.dart' show RiverpodScope;

class RiverpodScope extends _i0.ZapComponent {
  late _i1.List<_i2.Override> _$v0; // overrides
  late void Function()? _$v1; // task
  late final _i2.ProviderContainer _$v2; // container
  final _i0.Fragment Function()? $slot_;
  late final _i0.Slot _$n0;
  RiverpodScope(
    _i0.ZapValue<_i1.List<_i2.Override>>? $overrides,
    this.$slot_,
  ) {
    final self = _i0.PendingComponent();
    _$v0 = $overrides != null ? $overrides.value : (const []);
    _$v1 = null;
    _$v2 = _i2.ProviderContainer(
        parent: self.container, overrides: _$v0 /* overrides */);
    _$v2 /* container */ .vsyncOverride = (newTask) {
      assert(_$v1 /* task */ == null,
          'Two tasks scheduled at the same time, illegal state.');
      $invalidateAssign(2, _$v1 /* task */ = newTask);
    };
    self.container = _$v2 /* container */;
    $:
    _$v2 /* container */ .updateOverrides(_$v0 /* overrides */);
    $:
    if (_$v1 /* task */ != null) {
      _$v1 /* task */ !.call();
      $invalidateAssign(2, _$v1 /* task */ = null);
    }
    self.onDestroy(_$v2 /* container */ .dispose);
    takeOverPending(self);
  }
  @_i1.override
  void createInternal(_i3.Element target, [_i3.Node? anchor]) {
    _$n0 = _i0.Slot(this.$slot_ ?? () => __$t0(this), this);
    _$n0.create(target, anchor);
  }

  @_i1.override
  void remove() {
    _$n0.destroy();
  }

  @_i1.override
  void update(_i1.int delta) {
    if (delta & 1 != 0) {
      _$v2 /* container */ .updateOverrides(_$v0 /* overrides */);
    }
    if (delta & 2 != 0) {
      if (_$v1 /* task */ != null) {
        _$v1 /* task */ !.call();
        $invalidateAssign(2, _$v1 /* task */ = null);
      }
    }
    _$n0.update(delta);
  }

  _i1.List<_i2.Override> get overrides => _$v0;
  set overrides(_i1.List<_i2.Override> value) {
    if (value != _$v0) {
      _$v0 = value;
      $invalidate(1);
    }
  }
}

class __$t0 extends _i0.Fragment {
  final RiverpodScope _$parent;
  __$t0(this._$parent);
  @_i1.override
  void create(_i3.Element target, [_i3.Node? anchor]) {}
  @_i1.override
  void update(_i1.int delta) {}
  @_i1.override
  void destroy() {}
}
